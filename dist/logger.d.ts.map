{"version":3,"sources":["src/logger.ts"],"names":[],"mappings":"AASA,MAAM,WAAW,OAAO;IACpB,GAAG,EAAE;QACD,IAAI,EAAE,CAAC,OAAO,EAAE,MAAM,KAAK,IAAI,CAAC;QAChC,KAAK,EAAE,CAAC,OAAO,EAAE,MAAM,KAAK,IAAI,CAAC;KACpC,CAAA;CACJ;AAED,qBAAa,MAAO,YAAW,OAAO;IACf,OAAO,EAAE,MAAM;IAAS,SAAS,EAAE,MAAM;gBAAzC,OAAO,EAAE,MAAM,EAAS,SAAS,EAAE,MAAM;IAU5D,OAAO,CAAC,QAAQ,CAA+E;IAE/F,OAAO,CAAC,eAAe,CAIpB;IAEH,OAAO,CAAC,SAAS,CAMd;IAEI,GAAG,MAUP;CACN","file":"logger.d.ts","sourcesContent":["import * as moment from 'moment-timezone'\nrequire('./pkg-fix');\n\nconst { createLogger, format, transports } = require('winston');\n\nimport * as fs from 'fs';\nimport * as path from 'path';\nrequire('winston-daily-rotate-file');\n\nexport interface ILogger {\n    log: {\n        info: (message: string) => void,\n        error: (message: string) => void;\n    }\n}\n\nexport class Logger implements ILogger {\n    constructor(public logName: string, public directory: string){\n        try {\n            // make location if it doesn't exist\n            if (!fs.existsSync(path.join(directory))){\n                fs.mkdirSync(path.join(directory));\n            }\n        } catch (err) {\n            console.log(err)\n        }\n    }\n    private myFormat = format.printf(info => `${info.timestamp} [${info.level}]: ${info.message}`);\n\n    private appendTimestamp = format((info, opts) => {\n        if(opts.tz)\n            info.timestamp = moment().tz(opts.tz).format();\n        return info;\n    });\n\n    private transport = new (transports.DailyRotateFile)({\n        filename: `${path.join(this.directory, this.logName)}-%DATE%.log`,\n        datePattern: 'YYYY-MM-DD',\n        prepend: true,\n        maxSize: '20m',\n        maxFiles: '7d'\n    });\n\n    public log = createLogger({\n        level: 'info',\n        format: format.combine(\n            this.appendTimestamp({tz: 'Europe/London'}),\n            this.myFormat\n        ),\n        transports: [\n            new transports.Console(),\n            this.transport\n        ]\n    });\n}\n"]}