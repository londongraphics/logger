{"version":3,"sources":["src/logger.ts"],"names":[],"mappings":";;AAAA,wCAAyC;AACzC,OAAO,CAAC,WAAW,CAAC,CAAC;AAEf,IAAA,uBAAyD,EAAvD,8BAAY,EAAE,kBAAM,EAAE,0BAAiC,CAAC;AAEhE,uBAAyB;AACzB,2BAA6B;AAC7B,OAAO,CAAC,2BAA2B,CAAC,CAAC;AASrC;IACI,gBAAmB,OAAe,EAAS,SAAiB;QAAzC,YAAO,GAAP,OAAO,CAAQ;QAAS,cAAS,GAAT,SAAS,CAAQ;QAUpD,aAAQ,GAAG,MAAM,CAAC,MAAM,CAAC,UAAA,IAAI,IAAI,OAAG,IAAI,CAAC,SAAS,UAAK,IAAI,CAAC,KAAK,WAAM,IAAI,CAAC,OAAS,EAApD,CAAoD,CAAC,CAAC;QAEvF,oBAAe,GAAG,MAAM,CAAC,UAAC,IAAI,EAAE,IAAI;YACxC,IAAG,IAAI,CAAC,EAAE;gBACN,IAAI,CAAC,SAAS,GAAG,MAAM,EAAE,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC;YACnD,OAAO,IAAI,CAAC;QAChB,CAAC,CAAC,CAAC;QAEK,cAAS,GAAG,IAAI,CAAC,UAAU,CAAC,eAAe,CAAC,CAAC;YACjD,QAAQ,EAAK,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,OAAO,CAAC,gBAAa;YACjE,WAAW,EAAE,YAAY;YACzB,OAAO,EAAE,IAAI;YACb,OAAO,EAAE,KAAK;YACd,QAAQ,EAAE,IAAI;SACjB,CAAC,CAAC;QAEI,QAAG,GAAG,YAAY,CAAC;YACtB,KAAK,EAAE,MAAM;YACb,MAAM,EAAE,MAAM,CAAC,OAAO,CAClB,IAAI,CAAC,eAAe,CAAC,EAAC,EAAE,EAAE,eAAe,EAAC,CAAC,EAC3C,IAAI,CAAC,QAAQ,CAChB;YACD,UAAU,EAAE;gBACR,IAAI,UAAU,CAAC,OAAO,EAAE;gBACxB,IAAI,CAAC,SAAS;aACjB;SACJ,CAAC,CAAC;QAnCC,IAAI;YACA,oCAAoC;YACpC,IAAI,CAAC,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,EAAC;gBACrC,EAAE,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;aACtC;SACJ;QAAC,OAAO,GAAG,EAAE;YACV,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAA;SACnB;IACL,CAAC;IA4BL,aAAC;AAAD,CAtCA,AAsCC,IAAA;AAtCY,wBAAM","file":"logger.js","sourcesContent":["import * as moment from 'moment-timezone'\nrequire('./pkg-fix');\n\nconst { createLogger, format, transports } = require('winston');\n\nimport * as fs from 'fs';\nimport * as path from 'path';\nrequire('winston-daily-rotate-file');\n\nexport interface ILogger {\n    log: {\n        info: (message: string) => void,\n        error: (message: string) => void;\n    }\n}\n\nexport class Logger implements ILogger {\n    constructor(public logName: string, public directory: string){\n        try {\n            // make location if it doesn't exist\n            if (!fs.existsSync(path.join(directory))){\n                fs.mkdirSync(path.join(directory));\n            }\n        } catch (err) {\n            console.log(err)\n        }\n    }\n    private myFormat = format.printf(info => `${info.timestamp} [${info.level}]: ${info.message}`);\n\n    private appendTimestamp = format((info, opts) => {\n        if(opts.tz)\n            info.timestamp = moment().tz(opts.tz).format();\n        return info;\n    });\n\n    private transport = new (transports.DailyRotateFile)({\n        filename: `${path.join(this.directory, this.logName)}-%DATE%.log`,\n        datePattern: 'YYYY-MM-DD',\n        prepend: true,\n        maxSize: '20m',\n        maxFiles: '7d'\n    });\n\n    public log = createLogger({\n        level: 'info',\n        format: format.combine(\n            this.appendTimestamp({tz: 'Europe/London'}),\n            this.myFormat\n        ),\n        transports: [\n            new transports.Console(),\n            this.transport\n        ]\n    });\n}\n"]}